
# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

list = [123, '123', 'list', None, True, False, 45.3, '45.3']
print(list)
print(type(list))

for i in list:
    print(type(i))

#2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию input().

my_list = input('Введите через пробел элементы списка (сколько захотите): ')
my_list = my_list.split()
len_my_list = len(my_list)
for el in range(0, len(my_list) -1, 2):
    my_list[el], my_list[el+1] = my_list[el+1], my_list[el]
if len_my_list % 2 == 0:    # Это что бы показать, что работает как при чётном, так и при нечётном варианте
    print('Четное количество элементов')
else:
    print('Нечетное количество элементов')
print(my_list)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.

# Через дикт

number = None

while True:
    number = int(input('Введите, пожалуйста, номер месяца (число от 1 до 12): '))
    if number > 0 and number <= 13:
        break
    print('Число должно быть от 1 до 12, попробуйте еще раз: ')
month = {
    1: 'Зима',
    2: 'Зима',
    3: 'Весна',
    4: 'Весна',
    5: 'Весна',
    6: 'Лето',
    7: 'Лето',
    8: 'Лето',
    9: 'Осень',
    10: 'Осень,',
    11: 'Осень',
    12: 'Зима'
}
print(f'Ваше время года {month[number]}')

# через list

number = None

while True:
    number = int(input('Введите, пожалуйста, номер месяца (число от 1 до 12): '))
    if number > 0 and number <= 13:
        break
    print('Число должно быть от 1 до 12, попробуйте еще раз: ')

season_list = ['зима', 'весна', 'лето', 'осень']
if number == 12 or number == 1 or number == 2:
    print(f'Ваше время года {season_list[0]}')
elif number > 2 and number <= 5:
    print(f'Ваше время года {season_list[1]}')
elif number > 5 and number <= 8:
    print(f'Ваше время года {season_list[2]}')
else:
    print(f'Ваше время года {season_list[3]}')

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

say = input('Введите несколько слов через пробел: ') # say = input('Введите несколько слов через пробел: ').split()
say = say.split()
for i, element in enumerate(say, 1):
    print(f'{i}. {element}')
#
# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
my_list = [7, 5, 3, 3, 2]
q = len(my_list)
user_number = int(input('Введите число: '))
for number in range(0, len(my_list)):
    if user_number >= my_list[number]:
        my_list.insert(number, user_number)
        break
    if user_number < my_list[q-1]:
        my_list.append(user_number)
        break
print(my_list)
# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами, то есть характеристиками товара: название, цена, количество, единица измерения.
# Структуру нужно сформировать программно, запросив все данные у пользователя.
# Пример готовой структуры:
#
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]

# Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например, название. Тогда значение — список значений-характеристик,
# например, список названий товаров.
# Пример:
#
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }
products, order = [], 1
title, price, amount = None, None, None

while True:
    if title == None:
        tmp = input('Введите название товара: ')
        if  tmp == None:
            print('Наименование товара не может быть пустым. Попробуйте еще раз.')
            continue

        title = tmp

    if price == None:
        tmp = input('Введите стоимость товара: ')
        if  tmp.isdigit() == False:
            print('Цена должна быть целым числом. Попробуйте еще раз.')
            continue

        price = int(tmp)

    if amount == None:
        tmp = input('Введите количество: ')
        if tmp.isdigit() == False:
            print('Количество должно быть целым числом. Попробуйте еще раз.')
            continue

        amount = int(tmp)

    tmp = input('Введите единицы измерения: ')
    if tmp.isalpha() == False:
        print('Единица изменерения не может быть пустой. Попробуйте еще раз.')
        continue

    unit = tmp

    products.append((
        order,
        {
            'title': title,
            'price': price,
            'amount': amount,
            'unit': unit
        }
    ))

    title, price, amount = None, None, None
    order += 1

    print(products)

    q = input('Формирование списка завершено? (y/n)): ')
    if q.lower() == 'y':
        break

analitics = {
    'title': [],
    'price': [],
    'amount': [],
    'unit': set()
}

for _, item in products:
    analitics['title'].append(item['title'])
    analitics['price'].append(item['price'])
    analitics['amount'].append(item['amount'])
    analitics['unit'].add(item['unit'])

print(analitics)
